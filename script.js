/* script.js */
/*
  –û–ù–û–í–õ–ï–ù–ù–Ø: –Ø–∫—â–æ –º—ñ—Å—Ç–æ –Ω–µ –∑–Ω–∞–π–¥–µ–Ω–æ ‚Äî –ø–æ–∫–∞–∑—É—î–º–æ –ø—ñ–¥–∫–∞–∑–∫–∏ (–¥–æ 5 –≤–∞—Ä—ñ–∞–Ω—Ç—ñ–≤).
  –¢–∞–∫–æ–∂ –¥–æ–¥–∞—î–º–æ –≤—ñ–∑—É–∞–ª—å–Ω–∏–π –µ—Ñ–µ–∫—Ç (shake) —Ç–∞ –ø—ñ–¥—Å–≤—ñ—Ç–∫—É –ø–æ–º–∏–ª–∫–∏.
*/

const cityInput = document.getElementById('cityInput');
const searchBtn = document.getElementById('searchBtn');
const card = document.getElementById('card');
const hint = document.getElementById('hint');
const suggestionsEl = document.getElementById('suggestions');

const locationEl = document.getElementById('location');
const tempEl = document.getElementById('temp');
const descEl = document.getElementById('desc');
const iconEl = document.getElementById('icon');
const feelsEl = document.getElementById('feels');
const humidityEl = document.getElementById('humidity');
const adviceEl = document.getElementById('advice');
const forecastEl = document.getElementById('forecast');
const timezoneEl = document.getElementById('timezone');

const LAST_CITY_KEY = 'weather_last_city_openm';

// weathercode map (emoji + –æ–ø–∏—Å)
const WC_MAP = {
  0: ['‚òÄÔ∏è','—è—Å–Ω–æ'],1:['üå§Ô∏è','–º–∞–ª–æ —Ö–º–∞—Ä–Ω–æ'],2:['‚õÖ','–ø–µ—Ä–µ–º—ñ–Ω–Ω–∞ —Ö–º–∞—Ä–Ω—ñ—Å—Ç—å'],3:['‚òÅÔ∏è','—Ö–º–∞—Ä–Ω–æ'],
  45:['üå´Ô∏è','—Ç—É–º–∞–Ω'],48:['üå´Ô∏è','–æ—Å—ñ–¥–∞–Ω–Ω—è'],51:['üå¶Ô∏è','–¥—Ä—ñ–±–Ω–∏–π –¥–æ—â'],53:['üå¶Ô∏è','–ø–æ–º—ñ—Ä–Ω–∏–π –¥—Ä—ñ–±–Ω–∏–π –¥–æ—â'],
  55:['üåßÔ∏è','—â—ñ–ª—å–Ω–∏–π –¥—Ä—ñ–±–Ω–∏–π –¥–æ—â'],56:['üåßÔ∏è','–∑–∞–º–µ—Ä–∑–∞—é—á–∏–π –¥—Ä—ñ–±–Ω–∏–π –¥–æ—â'],57:['üåßÔ∏è','–∑–∞–º–µ—Ä–∑–∞—é—á–∏–π —Å–∏–ª—å–Ω–∏–π –¥—Ä—ñ–±–Ω–∏–π –¥–æ—â'],
  61:['üåßÔ∏è','–¥–æ—â'],63:['üåßÔ∏è','–ø–æ–º—ñ—Ä–Ω–∏–π –¥–æ—â'],65:['‚õàÔ∏è','—Å–∏–ª—å–Ω–∏–π –¥–æ—â'],66:['üå®Ô∏è','–∑–∞–º–µ—Ä–∑–∞—é—á–∏–π –¥–æ—â'],
  67:['üå®Ô∏è','—Å–∏–ª—å–Ω–∏–π –∑–∞–º–µ—Ä–∑–∞—é—á–∏–π –¥–æ—â'],71:['‚ùÑÔ∏è','—Å–Ω—ñ–≥'],73:['‚ùÑÔ∏è','–ø–æ–º—ñ—Ä–Ω–∏–π —Å–Ω—ñ–≥'],75:['‚ùÑÔ∏è','—Å–∏–ª—å–Ω–∏–π —Å–Ω—ñ–≥'],
  77:['üå®Ô∏è','—Å–Ω—ñ–≥–æ–≤—ñ –∫—Ä–∏—Ö—Ç–∏'],80:['üåßÔ∏è','–∑–ª–∏–≤–∏ (–ª–æ–∫–∞–ª—å–Ω–æ)'],81:['üåßÔ∏è','–ø–æ–º—ñ—Ä–Ω—ñ –∑–ª–∏–≤–∏'],82:['‚õàÔ∏è','—Å–∏–ª—å–Ω—ñ –∑–ª–∏–≤–∏'],
  85:['‚ùÑÔ∏è','—Å–Ω—ñ–≥–æ–ø–∞–¥ (–ª–µ–≥–∫–∏–π)'],86:['‚ùÑÔ∏è','—Å–Ω—ñ–≥–æ–ø–∞–¥ (—Å–∏–ª—å–Ω–∏–π)'],95:['‚õàÔ∏è','–≥—Ä–æ–∑–∞'],96:['‚õàÔ∏è','–≥—Ä–æ–∑–∞ –∑ –≥—Ä–∞–¥–æ–º'],99:['‚õàÔ∏è','—Å–∏–ª—å–Ω–∞ –≥—Ä–æ–∑–∞ –∑ –≥—Ä–∞–¥–æ–º']
};

function wcToEmoji(code){ return WC_MAP[code] ? WC_MAP[code][0] : 'üåà'; }
function wcToDesc(code){ return WC_MAP[code] ? WC_MAP[code][1] : '–Ω–µ–ø–µ—Ä–µ–¥–±–∞—á—É–≤–∞–Ω–æ'; }

function setLoading(is){
  if(is){ searchBtn.textContent = '–ó–∞–≤–∞–Ω—Ç–∞–∂–µ–Ω–Ω—è...'; searchBtn.disabled = true; }
  else { searchBtn.textContent = '–ü–æ—à—É–∫'; searchBtn.disabled = false; }
}

function clearSuggestions(){ suggestionsEl.innerHTML = ''; suggestionsEl.style.display = 'none'; }
function showSuggestions(list){
  clearSuggestions();
  if(!list || !list.length) return;
  suggestionsEl.style.display = 'flex';
  list.forEach(item => {
    const btn = document.createElement('button');
    btn.className = 'suggestion';
    btn.type = 'button';
    const label = `${item.name}${item.admin1 ? ', ' + item.admin1 : ''}${item.country ? ' ‚Äî ' + item.country : ''}`;
    btn.innerHTML = `<strong>${label}</strong><span class="sub">–ö–ª—ñ–∫–æ–≤–µ—Ü—å ‚Äî –ø–æ–∫–∞–∑–∞—Ç–∏ –ø–æ–≥–æ–¥—É</span>`;
    btn.addEventListener('click', ()=> {
      cityInput.value = label;
      clearSuggestions();
      fetchWeatherByCoords(item.latitude, item.longitude, item.name, item.country, item.timezone);
    });
    suggestionsEl.appendChild(btn);
  });
}

function showError(text){
  hint.innerHTML = text;
  card.classList.add('hidden');
  // shake input & add red ring
  cityInput.classList.remove('error');
  void cityInput.offsetWidth; // reflow to restart animation if present
  cityInput.classList.add('shake','error');
  setTimeout(()=>{ cityInput.classList.remove('shake'); }, 480);
}

function showNotFoundWithSuggestions(city, suggestions){
  if(suggestions && suggestions.length){
    hint.innerHTML = `–ù–µ –∑–Ω–∞–π–¥–µ–Ω–æ —Ç–æ—á–Ω–æ—ó –≤—ñ–¥–ø–æ–≤—ñ–¥–Ω–æ—Å—Ç—ñ –¥–ª—è ¬´<strong>${city}</strong>¬ª. –ú–æ–∂–ª–∏–≤–æ –≤–∏ –º–∞–ª–∏ –Ω–∞ —É–≤–∞–∑—ñ:`;
    showSuggestions(suggestions);
    // –ø—ñ–¥—Å–≤—ñ—Ç–∏—Ç–∏ –ø–æ–ª–µ –≤–≤–æ–¥—É
    cityInput.classList.add('error');
  } else {
    hint.innerHTML = `<span class="notfound">–ú—ñ—Å—Ç–æ ¬´${city}¬ª –Ω–µ –∑–Ω–∞–π–¥–µ–Ω–æ. –°–ø—Ä–æ–±—É–π—Ç–µ —ñ–Ω—à—É –Ω–∞–∑–≤—É –∞–±–æ –ø–µ—Ä–µ–≤—ñ—Ä—Ç–µ –ø—Ä–∞–≤–æ–ø–∏—Å.</span>`;
    cityInput.classList.add('error');
    // shake
    cityInput.classList.remove('shake');
    void cityInput.offsetWidth;
    cityInput.classList.add('shake');
    setTimeout(()=>{ cityInput.classList.remove('shake'); }, 480);
  }
}

function showCard(){ card.classList.remove('hidden'); hint.textContent = ''; clearSuggestions(); cityInput.classList.remove('error'); }

function adviceFor(tempC, weathercode, pop){
  const adv = [];
  const wc = Number(weathercode);
  if(pop > 0.4) adv.push('–ú–æ–∂–ª–∏–≤—ñ –æ–ø–∞–¥–∏ ‚Äî –≤—ñ–∑—å–º—ñ—Ç—å –ø–∞—Ä–∞—Å–æ–ª—å–∫—É ‚òî');
  if([51,53,55,61,63,65,80,81,82].includes(wc)) adv.push('–†–µ–∫–æ–º–µ–Ω–¥—É—î—Ç—å—Å—è –¥–æ—â–æ–≤–∏–π –æ–¥—è–≥');
  if([71,73,75,85,86].includes(wc)) adv.push('–¢–µ–ø–ª–∏–π –æ–¥—è–≥ —Ç–∞ —á–µ—Ä–µ–≤–∏–∫–∏ ‚Äî –±—É–¥–µ —Å–Ω—ñ–≥ ‚ùÑÔ∏è');
  if(tempC <= 5) adv.push('–•–æ–ª–æ–¥–Ω–æ ‚Äî –Ω–∞–¥—è–≥–Ω—ñ—Ç—å –∫—É—Ä—Ç–∫—É üß•');
  if(tempC > 25) adv.push('–°–ø–µ–∫–æ—Ç–Ω–æ ‚Äî –Ω–µ –∑–∞–±—É–≤–∞–π—Ç–µ –ø–∏—Ç–∏ –≤–æ–¥—É üíß');
  if([95,96,99].includes(wc)) adv.push('–ú–æ–∂–ª–∏–≤—ñ –≥—Ä–æ–∑–∏ ‚Äî –æ–±–µ—Ä–µ–∂–Ω–æ –∑ –≤—ñ–¥–∫—Ä–∏—Ç–∏–º–∏ –ø—Ä–æ—Å—Ç–æ—Ä–∞–º–∏ ‚õàÔ∏è');
  if(adv.length === 0) adv.push('–ù—ñ—á–æ–≥–æ –æ—Å–æ–±–ª–∏–≤–æ–≥–æ ‚Äî –ø—Ä–∏—î–º–Ω–æ–≥–æ –¥–Ω—è! üôÇ');
  return adv.join(' | ');
}

// –ü–æ–≤–µ—Ä—Ç–∞—î–º–æ 1 —Ä–µ–∑—É–ª—å—Ç–∞—Ç (best) –∞–±–æ null
async function geocodeOne(city){
  const q = encodeURIComponent(city);
  const url = `https://geocoding-api.open-meteo.com/v1/search?name=${q}&count=1&language=uk`;
  const res = await fetch(url);
  if(!res.ok) throw new Error('–ü–æ–º–∏–ª–∫–∞ –≥–µ–æ–∫–æ–¥—É–≤–∞–Ω–Ω—è');
  const j = await res.json();
  if(!j.results || j.results.length === 0) return null;
  return j.results[0];
}

// –ó–∞–ø–∏—Ç –ø—ñ–¥–∫–∞–∑–æ–∫ ‚Äî max 5
async function geocodeSuggest(city){
  const q = encodeURIComponent(city);
  const url = `https://geocoding-api.open-meteo.com/v1/search?name=${q}&count=5&language=uk`;
  const res = await fetch(url);
  if(!res.ok) return [];
  const j = await res.json();
  return j.results || [];
}

// –û—Ç—Ä–∏–º—É—î–º–æ –ø—Ä–æ–≥–Ω–æ–∑ –≤—ñ–¥ Open-Meteo
async function getForecast(lat, lon, timezone){
  const url = `https://api.open-meteo.com/v1/forecast?latitude=${lat}&longitude=${lon}` +
              `&current_weather=true&daily=weathercode,temperature_2m_max,temperature_2m_min,precipitation_probability_max` +
              `&timezone=${encodeURIComponent(timezone || 'auto')}&forecast_days=7`;
  const res = await fetch(url);
  if(!res.ok) throw new Error('–ü–æ–º–∏–ª–∫–∞ –æ—Ç—Ä–∏–º–∞–Ω–Ω—è –ø—Ä–æ–≥–Ω–æ–∑—É');
  return await res.json();
}

function formatDateUADateString(isoDate){
  try{
    const d = new Date(isoDate);
    return d.toLocaleDateString('uk-UA', { weekday: 'short', day: 'numeric', month: 'short' });
  }catch(e){
    return isoDate;
  }
}

function renderWeather(name, country, timezone, forecast){
  const cur = forecast.current_weather;
  const ctemp = Math.round(cur.temperature);
  locationEl.textContent = `${name}${country ? ', ' + country : ''}`;
  tempEl.textContent = `${ctemp}¬∞C`;
  descEl.textContent = wcToDesc(cur.weathercode);
  iconEl.textContent = wcToEmoji(cur.weathercode);
  feelsEl.textContent = `–í—ñ—Ç–µ—Ä: ${Math.round(cur.windspeed)} –º/—Å`;
  humidityEl.textContent = `–î–∞–Ω—ñ: Open-Meteo (–¥–µ—Ç–∞–ª—å–Ω–∞ –≤–æ–ª–æ–≥—ñ—Å—Ç—å –ø–æ—Ç—Ä–µ–±—É—î hourly-–∑–∞–ø–∏—Ç—É)`;
  timezoneEl.textContent = `–ß–∞—Å–æ–≤–∏–π –ø–æ—è—Å: ${timezone || '–∞–≤—Ç–æ'}`;
  adviceEl.textContent = adviceFor(ctemp, cur.weathercode, 0);

  const daily = forecast.daily;
  const dates = daily.time;
  const codes = daily.weathercode;
  const tmax = daily.temperature_2m_max;
  const tmin = daily.temperature_2m_min;
  const popArr = daily.precipitation_probability_max || [];

  forecastEl.innerHTML = '';
  for(let i=0; i<Math.min(5, dates.length); i++){
    const dateStr = formatDateUADateString(dates[i]);
    const code = codes[i];
    const icon = wcToEmoji(code);
    const main = wcToDesc(code);
    const max = Math.round(tmax[i]);
    const min = Math.round(tmin[i]);
    const pop = popArr[i] !== undefined ? (popArr[i] / 100) : 0;
    const div = document.createElement('div');
    div.className = 'day';
    div.innerHTML = `
      <div class="date">${dateStr}</div>
      <div style="font-size:32px;margin:6px 0">${icon}</div>
      <div class="dmain">${main}</div>
      <div class="dtemp">${min}¬∞ / ${max}¬∞</div>
      <div class="pop">${pop > 0 ? '–û–ø–∞–¥—ñ–≤: ' + Math.round(pop*100) + '%' : '–û–ø–∞–¥—ñ–≤ –º–∞–ª–æ–π–º–æ–≤—ñ—Ä–Ω–æ'}</div>
      <div class="dadv" style="font-size:12px;margin-top:8px;color:var(--muted)">${adviceFor(Math.round((min+max)/2), code, pop)}</div>
    `;
    forecastEl.appendChild(div);
  }

  showCard();
}

async function fetchWeatherByCoords(lat, lon, name, country, timezone){
  try{
    setLoading(true);
    const fore = await getForecast(lat, lon, timezone);
    renderWeather(name, country, timezone, fore);
    localStorage.setItem(LAST_CITY_KEY, `${name}${country ? ', ' + country : ''}`);
  }catch(err){
    showError('‚ö†Ô∏è ' + (err.message || String(err)));
  }finally{
    setLoading(false);
  }
}

async function fetchWeatherByCity(city){
  try{
    setLoading(true);
    clearSuggestions();
    const best = await geocodeOne(city);
    if(best){
      await fetchWeatherByCoords(best.latitude, best.longitude, best.name, best.country, best.timezone);
      return;
    }
    // —è–∫—â–æ –Ω–µ –∑–Ω–∞–π—à–ª–∏ best ‚Äî –ø—Ä–æ–±—É—î–º–æ –ø—ñ–¥–∫–∞–∑–∫–∏
    const suggestions = await geocodeSuggest(city);
    if(suggestions && suggestions.length){
      showNotFoundWithSuggestions(city, suggestions);
    } else {
      showNotFoundWithSuggestions(city, []);
    }
  }catch(err){
    showError('‚ö†Ô∏è ' + (err.message || String(err)));
  }finally{
    setLoading(false);
  }
}

// –ü–æ–¥—ñ—ó
searchBtn.addEventListener('click', () => {
  const city = cityInput.value.trim();
  if(!city) { showError('–í–≤–µ–¥—ñ—Ç—å –º—ñ—Å—Ç–æ'); return; }
  fetchWeatherByCity(city);
});
cityInput.addEventListener('keydown', (e)=>{
  if(e.key === 'Enter') searchBtn.click();
});

window.addEventListener('load', ()=>{
  const last = localStorage.getItem(LAST_CITY_KEY);
  if(last){ cityInput.value = last; fetchWeatherByCity(last); }
});


// ------------- Ads + Sponsored + Cookie Consent helpers -------------

// –ü—Ä–æ—Å—Ç–∏–π –º–µ–Ω–µ–¥–∂–µ—Ä consent (localStorage)
const CONSENT_KEY = 'site_consent_ads';
function hasConsent(){ return localStorage.getItem(CONSENT_KEY) === 'granted'; }
function setConsent(v){ localStorage.setItem(CONSENT_KEY, v ? 'granted' : 'denied'); }

// DOM refs
const adBanner = document.getElementById('adBanner');
const sponsoredCard = document.getElementById('sponsoredCard');
const sponText = document.getElementById('sponText');
const sponLink = document.getElementById('sponLink');
const sponImg = document.getElementById('sponImg');
const cookieConsent = document.getElementById('cookieConsent');
const acceptCookies = document.getElementById('acceptCookies');
const rejectCookies = document.getElementById('rejectCookies');

// –ü–æ–∫–∞–∑–∞—Ç–∏/–ø—Ä–∏—Ö–æ–≤–∞—Ç–∏ —Ä–µ–∫–ª–∞–º–Ω—ñ –±–ª–æ–∫–∏ –ø—ñ—Å–ª—è consent
function updateAdsVisibility(){
  if(hasConsent()){
    adBanner.style.display = 'flex';
    // —è–∫—â–æ —Ö–æ—á–µ—à ‚Äî –ø—ñ–¥–≤–∞–Ω—Ç–∞–∂—É–π —á–µ—Ä–µ–∑ script –≤—Å—Ç–∞–≤–∫—É AdSense —Ç—É—Ç
  } else {
    // –ø–æ–∫–∞–∑–∞—Ç–∏ –∑–∞–≥–ª—É—à–∫—É (–Ω–µ –∑–≤–µ—Ä—Ö—É —Å—Ç–æ—Ä–æ–Ω–Ω—å–æ–≥–æ —Å–∫—Ä–∏–ø—Ç–∞)
    adBanner.style.display = 'flex';
  }
}

// –ó–∞–ø–æ–≤–Ω–∏—Ç–∏ sponsoredCard ‚Äî –ø—Ä–∏–∫–ª–∞–¥ –¥–∞–Ω–∏—Ö (–º–æ–∂–µ—à –∑–∞–º—ñ–Ω–∏—Ç–∏ –Ω–∞ –¥–∏–Ω–∞–º—ñ—á–Ω—ñ)
function showSponsoredCard(){
  sponText.textContent = '–û—Ç—Ä–∏–º–∞–π 20% –∑–Ω–∏–∂–∫–∏ –Ω–∞ —Ç—É—Ä–∏—Å—Ç–∏—á–Ω—ñ —Ä—é–∫–∑–∞–∫–∏ ‚Äî –ø—Ä–æ–º–æ–∫–æ–¥ WEATHER20';
  sponLink.href = 'https://your-affiliate.link';
  sponImg.src = 'https://via.placeholder.com/240x140?text=Sponsor';
  sponsoredCard.classList.remove('hidden');
}

// Cookie consent controls
function initCookieConsent(){
  if(hasConsent()){
    cookieConsent.classList.add('hidden');
  } else {
    cookieConsent.classList.remove('hidden');
  }
  updateAdsVisibility();
}
acceptCookies?.addEventListener('click', ()=>{
  setConsent(true); cookieConsent.classList.add('hidden'); updateAdsVisibility();
});
rejectCookies?.addEventListener('click', ()=>{
  setConsent(false); cookieConsent.classList.add('hidden'); updateAdsVisibility();
});

// –í–∏–∫–ª–∏–∫–∞—Ç–∏ –Ω–∞ load –∞–±–æ –ø—ñ—Å–ª—è –ø–µ—Ä—à–æ–≥–æ —É—Å–ø—ñ—à–Ω–æ–≥–æ —Ä–µ–Ω–¥–µ—Ä—É –ø–æ–≥–æ–¥–∏
initCookieConsent();

// –†–æ–∑—É–º–Ω–∞ —ñ–Ω–∂–µ–∫—Ü—ñ—è —Ä–µ–∫–ª–∞–º–∏ —É forecast: –∑–∞–º—ñ–Ω–∏—Ç–∏ –æ–¥–Ω—É –∫–∞—Ä—Ç–∫—É –Ω–∞ ad (–Ω–∞–ø—Ä–∏–∫–ª–∞–¥, 3-—è)
function injectAdIntoForecast(){
  const cards = document.querySelectorAll('#forecast .day');
  if(cards.length >= 3){
    const adCard = document.createElement('div');
    adCard.className = 'day';
    adCard.innerHTML = `
      <div class="date">–†–µ–∫–ª–∞–º–∞</div>
      <div style="font-size:28px;margin:6px 0">üì£</div>
      <div class="dmain">–°–ø–æ–Ω—Å–æ—Ä</div>
      <div class="dtemp">–ü—Ä–æ–ø–æ–∑–∏—Ü—ñ—è</div>
      <div class="pop"><a href="https://your-affiliate.link" target="_blank" rel="noopener noreferrer">–î–µ—Ç–∞–ª—å–Ω—ñ—à–µ</a></div>
    `;
    // –∑–∞–º—ñ–Ω—è—î–º–æ 3-–π –µ–ª–µ–º–µ–Ω—Ç –∞–±–æ –≤—Å—Ç–∞–≤–ª—è—î–º–æ –ø–µ—Ä–µ–¥ –Ω–∏–º
    const third = cards[2];
    third.parentNode.insertBefore(adCard, third);
  }
}

// –≤–∏–∫–ª–∏–∫–∞–π injectAdIntoForecast() –ø—ñ—Å–ª—è renderWeather()
// ===== Mobile UX tweaks =====
(function(){
  // –Ø–∫—â–æ –ø—Ä–∏—Å—Ç—Ä—ñ–π touch, –∑–º–µ–Ω—à–∏–º–æ –∞–Ω—ñ–º–∞—Ü—ñ—ó —ñ –∑—Ä–æ–±–∏–º–æ –ø—Ä–æ–≥–Ω–æ–∑ "snap" –¥–ª—è –∑—Ä—É—á–Ω–æ—Å—Ç—ñ
  const isTouch = 'ontouchstart' in window || navigator.maxTouchPoints > 0;
  if(isTouch){
    // –¥–æ–¥–∞—î–º–æ snap scrolling –¥–ª—è forecast
    const forecast = document.getElementById('forecast');
    if(forecast){
      forecast.style.scrollSnapType = 'x mandatory';
      Array.from(forecast.children).forEach(child => {
        child.style.scrollSnapAlign = 'center';
      });
    }

    // –≤–∏–º–∏–∫–∞—î–º–æ background-attachment fixed —è–∫—â–æ –≤–æ–Ω–æ —â–µ —î
    const bg = document.querySelector('.bg-wrap');
    if(bg) bg.style.backgroundAttachment = 'scroll';
  }

  // –∞–≤—Ç–æ–º–∞—Ç–∏—á–Ω–æ –ø—Ä–∏—Ö–æ–≤–∞—Ç–∏ —Ä–µ–∫–ª–∞–º—É –Ω–∞ –º–∞–ª–µ–Ω—å–∫–∏—Ö –µ–∫—Ä–∞–Ω–∞—Ö (–æ–ø—Ü—ñ–æ–Ω–∞–ª—å–Ω–æ)
  function maybeHideAds(){
    const w = window.innerWidth || document.documentElement.clientWidth;
    const ad = document.getElementById('adBanner');
    if(ad){
      if(w < 480) ad.style.display = 'none';
      else ad.style.display = '';
    }
  }
  maybeHideAds();
  window.addEventListener('resize', maybeHideAds);
})();


// ---------- Falling autumn leaves generator ----------
(function initLeaves(){
  // –ø–æ–≤–∞–∂–∞—î–º reduced motion
  const prefersReduced = window.matchMedia && window.matchMedia('(prefers-reduced-motion: reduce)').matches;
  if(prefersReduced) return; // –Ω—ñ—á–æ–≥–æ –Ω–µ —Ä–æ–±–∏–º–æ

  const layer = document.getElementById('leaf-layer');
  if(!layer) return;

  const isTouch = 'ontouchstart' in window || navigator.maxTouchPoints > 0;
  // –∫—ñ–ª—å–∫—ñ—Å—Ç—å –ª–∏—Å—Ç—è: –º–µ–Ω—à–µ –Ω–∞ –º–æ–±—ñ–ª—å–Ω–∏—Ö
  const COUNT = isTouch ? 8 : 14;

  const EMOJIS = ['üçÇ','üçÅ','üçÉ']; // –º–æ–∂–Ω–∞ —Ä–æ–∑—à–∏—Ä–∏—Ç–∏
  const vw = Math.max(document.documentElement.clientWidth || 0, window.innerWidth || 0);
  const vh = Math.max(document.documentElement.clientHeight || 0, window.innerHeight || 0);

  // —Å—Ç–≤–æ—Ä–∏—Ç–∏ N –ª–∏—Å—Ç–∫—ñ–≤
  for(let i=0;i<COUNT;i++){
    const leaf = document.createElement('div');
    leaf.className = 'leaf';
    const emoji = EMOJIS[Math.floor(Math.random()*EMOJIS.length)];
    leaf.setAttribute('data-emoji', emoji);

    // –≤–∏–ø–∞–¥–∫–æ–≤—ñ –ø–∞—Ä–∞–º–µ—Ç—Ä–∏
    const size = Math.round(18 + Math.random()*36); // px font-size
    const startX = Math.round(Math.random()*vw) + 'px'; // –ø–æ—á–∞—Ç–∫–æ–≤–µ –ª—ñ–≤–æ
    // –¥—Ä–µ–π—Ñ –≤ –∫—ñ–Ω—Ü—ñ (–º–æ–∂–µ –±—É—Ç–∏ –≤ –º–µ–∂–∞—Ö -25vw..+25vw)
    const driftSign = Math.random() < 0.5 ? -1 : 1;
    const drift = (Math.random()*0.25*vw*driftSign).toFixed(0) + 'px';
    const dur = (6 + Math.random()*8).toFixed(1) + 's'; // 6..14s
    const delay = (Math.random()*-8).toFixed(2) + 's'; // negative delays for staggering
    const spin = (360 + Math.random()*720).toFixed(0) + 'deg';
    const startRot = (Math.random()*360).toFixed(0) + 'deg';

    // –∑–∞–¥–∞—î–º–æ –∑–º—ñ–Ω–Ω—ñ CSS –¥–ª—è —Ü—å–æ–≥–æ –ª–∏—Å—Ç–∫–∞
    leaf.style.setProperty('--dur', dur);
    leaf.style.setProperty('--delay', delay);
    leaf.style.setProperty('--drift', drift);
    leaf.style.setProperty('--startX', startX);
    leaf.style.setProperty('--spin', spin);
    leaf.style.setProperty('--startRot', startRot);
    leaf.style.fontSize = size + 'px';

    // –≤–∏–ø–∞–¥–∫–æ–≤–∞ –≤–µ—Ä—Ç–∏–∫–∞–ª—å–Ω–∞ –ø–æ—á–∞—Ç–∫–æ–≤–∞ –ø–æ–∑–∏—Ü—ñ—è (–Ω–µ–º–∞ ‚Äî –≤–∏–∫–æ—Ä–∏—Å—Ç–æ–≤—É—î–º–æ keyframe -10vh)
    // –¥–æ–¥–∞—î–º–æ –Ω–µ–≤–µ–ª–∏–∫–∏–π –∑—Å—É–≤ –ø–æ –≥–æ—Ä–∏–∑–æ–Ω—Ç–∞–ª—ñ —á–µ—Ä–µ–∑ left
    leaf.style.left = Math.max(0, (Math.random()*100)) + 'vw';

    // –≤–∏–ø–∞–¥–∫–æ–≤–∞ opacity —Ç–∞ blur (—â–æ–± –≤—ñ–¥—á—É—Ç—Ç—è –≥–ª–∏–±–∏–Ω–∏)
    leaf.style.opacity = (0.7 + Math.random()*0.3).toFixed(2);
    // –¥–æ–¥–∞—î–º–æ —Ç—Ä–æ—Ö–∏ transform translateZ –¥–ª—è –∫—Ä–∞—â–æ–≥–æ —Ä–µ–Ω–¥–µ—Ä—É GPU
    leaf.style.willChange = 'transform, opacity';

    // inner content - emoji
    leaf.textContent = emoji;

    layer.appendChild(leaf);

    // –æ—á–∏—â–µ–Ω–Ω—è —Å—Ç–∞—Ä–∏—Ö –µ–ª–µ–º–µ–Ω—Ç—ñ–≤, —â–æ–± DOM –Ω–µ —Ä—ñ—Å –≤ –Ω–µ—Å–∫—ñ–Ω—á–µ–Ω–Ω—ñ—Å—Ç—å –ø—Ä–∏ SPA –Ω–∞–≤—ñ–≥–∞—Ü—ñ—ó
    // (–Ω–µ–æ–±–æ–≤'—è–∑–∫–æ–≤–æ) ‚Äî —Ç—É—Ç –º–∏ –ª–∏—à –∑–∞–ª–∏—à–∞—î–º–æ COUNT –µ–ª–µ–º–µ–Ω—Ç—ñ–≤
  }

  // –ø—Ä–∏ —Ä–µ—Å–∞–π–∑–∞—Ö –æ–Ω–æ–≤–ª—é—î–º–æ –ø–æ–∑–∏—Ü—ñ—ó (—â–æ–± left –æ–±—á–∏—Å–ª—é–≤–∞–≤—Å—è –ø—ñ–¥ –Ω–æ–≤–∏–π vw)
  let resizeTimeout;
  window.addEventListener('resize', ()=>{
    clearTimeout(resizeTimeout);
    resizeTimeout = setTimeout(()=>{
      // –∑–Ω–∏—â—É—î–º–æ —ñ –ø–µ—Ä–µ—Å–æ–∑–¥–∞—î–º–æ, –ø—Ä–æ—Å—Ç—ñ—à–µ –¥–ª—è —É–∑–≥–æ–¥–∂–µ–Ω–æ—Å—Ç—ñ
      while(layer.firstChild) layer.removeChild(layer.firstChild);
      initLeaves(); // –±–µ–∑–ø–µ—á–Ω–∏–π —Ä–µ–∫—É—Ä—Å–∏–≤–Ω–∏–π –≤–∏–∫–ª–∏–∫ ‚Äî –∞–ª–µ –º–æ–∂–µ –≤–∏–∫–ª–∏–∫–∞—Ç–∏—Å—è –±–∞–≥–∞—Ç–æ —Ä–∞–∑—ñ–≤ –ø—Ä–∏ resize; —Ç–æ—â–æ
    }, 250);
  }, {passive: true});
})();


